{
  "groups": [
    {
      "name": "kafka",
      "type": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties"
    },
    {
      "name": "kafka.consumer",
      "type": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Consumer",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties",
      "sourceMethod": "getConsumer()"
    },
    {
      "name": "kafka.listener",
      "type": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Listener",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties",
      "sourceMethod": "getListener()"
    },
    {
      "name": "kafka.producer",
      "type": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Producer",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties",
      "sourceMethod": "getProducer()"
    },
    {
      "name": "kafka.ssl",
      "type": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Ssl",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties",
      "sourceMethod": "getSsl()"
    },
    {
      "name": "kafka.template",
      "type": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Template",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties",
      "sourceMethod": "getTemplate()"
    }
  ],
  "properties": [
    {
      "name": "kafka.bootstrap-servers",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial\n connection to the Kafka cluster.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties"
    },
    {
      "name": "kafka.client-id",
      "type": "java.lang.String",
      "description": "Id to pass to the server when making requests; used for server-side logging.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties"
    },
    {
      "name": "kafka.consumer.auto-commit-interval",
      "type": "java.lang.Integer",
      "description": "Frequency in milliseconds that the consumer offsets are auto-committed to Kafka\n if 'enable.auto.commit' true.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Consumer"
    },
    {
      "name": "kafka.consumer.auto-offset-reset",
      "type": "java.lang.String",
      "description": "What to do when there is no initial offset in Kafka or if the current offset\n does not exist any more on the server.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Consumer"
    },
    {
      "name": "kafka.consumer.bootstrap-servers",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial\n connection to the Kafka cluster.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Consumer"
    },
    {
      "name": "kafka.consumer.client-id",
      "type": "java.lang.String",
      "description": "Id to pass to the server when making requests; used for server-side logging.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Consumer"
    },
    {
      "name": "kafka.consumer.enable-auto-commit",
      "type": "java.lang.Boolean",
      "description": "If true the consumer's offset will be periodically committed in the background.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Consumer"
    },
    {
      "name": "kafka.consumer.fetch-max-wait",
      "type": "java.lang.Integer",
      "description": "Maximum amount of time in milliseconds the server will block before answering\n the fetch request if there isn't sufficient data to immediately satisfy the\n requirement given by \"fetch.min.bytes\".",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Consumer"
    },
    {
      "name": "kafka.consumer.fetch-min-size",
      "type": "java.lang.Integer",
      "description": "Minimum amount of data the server should return for a fetch request in bytes.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Consumer"
    },
    {
      "name": "kafka.consumer.group-id",
      "type": "java.lang.String",
      "description": "Unique string that identifies the consumer group this consumer belongs to.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Consumer"
    },
    {
      "name": "kafka.consumer.heartbeat-interval",
      "type": "java.lang.Integer",
      "description": "Expected time in milliseconds between heartbeats to the consumer coordinator.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Consumer"
    },
    {
      "name": "kafka.consumer.key-deserializer",
      "type": "java.lang.Class<?>",
      "description": "Deserializer class for keys.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Consumer"
    },
    {
      "name": "kafka.consumer.max-poll-records",
      "type": "java.lang.Integer",
      "description": "Maximum number of records returned in a single call to poll().",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Consumer"
    },
    {
      "name": "kafka.consumer.session-timeout-ms",
      "type": "java.lang.Integer",
      "description": "session.timeout.ms",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Consumer"
    },
    {
      "name": "kafka.consumer.value-deserializer",
      "type": "java.lang.Class<?>",
      "description": "Deserializer class for values.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Consumer"
    },
    {
      "name": "kafka.listener.ack-count",
      "type": "java.lang.Integer",
      "description": "Number of records between offset commits when ackMode is \"COUNT\" or\n \"COUNT_TIME\".",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Listener"
    },
    {
      "name": "kafka.listener.ack-mode",
      "type": "org.springframework.kafka.listener.AbstractMessageListenerContainer$AckMode",
      "description": "Listener AckMode; see the spring-kafka documentation.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Listener"
    },
    {
      "name": "kafka.listener.ack-time",
      "type": "java.lang.Long",
      "description": "Time in milliseconds between offset commits when ackMode is \"TIME\" or\n \"COUNT_TIME\".",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Listener"
    },
    {
      "name": "kafka.listener.concurrency",
      "type": "java.lang.Integer",
      "description": "Number of threads to run in the listener containers.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Listener"
    },
    {
      "name": "kafka.listener.poll-timeout",
      "type": "java.lang.Long",
      "description": "Timeout in milliseconds to use when polling the consumer.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Listener"
    },
    {
      "name": "kafka.producer.acks",
      "type": "java.lang.String",
      "description": "Number of acknowledgments the producer requires the leader to have received\n before considering a request complete.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Producer"
    },
    {
      "name": "kafka.producer.batch-size",
      "type": "java.lang.Integer",
      "description": "Number of records to batch before sending.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Producer"
    },
    {
      "name": "kafka.producer.bootstrap-servers",
      "type": "java.util.List<java.lang.String>",
      "description": "Comma-delimited list of host:port pairs to use for establishing the initial\n connection to the Kafka cluster.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Producer"
    },
    {
      "name": "kafka.producer.buffer-memory",
      "type": "java.lang.Long",
      "description": "Total bytes of memory the producer can use to buffer records waiting to be sent\n to the server.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Producer"
    },
    {
      "name": "kafka.producer.client-id",
      "type": "java.lang.String",
      "description": "Id to pass to the server when making requests; used for server-side logging.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Producer"
    },
    {
      "name": "kafka.producer.compression-type",
      "type": "java.lang.String",
      "description": "Compression type for all data generated by the producer.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Producer"
    },
    {
      "name": "kafka.producer.key-serializer",
      "type": "java.lang.Class<?>",
      "description": "Serializer class for keys.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Producer"
    },
    {
      "name": "kafka.producer.linger-ms",
      "type": "java.lang.Integer",
      "description": "linger.ms",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Producer"
    },
    {
      "name": "kafka.producer.retries",
      "type": "java.lang.Integer",
      "description": "When greater than zero, enables retrying of failed sends.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Producer"
    },
    {
      "name": "kafka.producer.value-serializer",
      "type": "java.lang.Class<?>",
      "description": "Serializer class for values.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Producer"
    },
    {
      "name": "kafka.properties",
      "type": "java.util.Map<java.lang.String,java.lang.String>",
      "description": "Additional properties used to configure the client.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties"
    },
    {
      "name": "kafka.ssl.key-password",
      "type": "java.lang.String",
      "description": "Password of the private key in the key store file.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Ssl"
    },
    {
      "name": "kafka.ssl.keystore-location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the key store file.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Ssl"
    },
    {
      "name": "kafka.ssl.keystore-password",
      "type": "java.lang.String",
      "description": "Store password for the key store file.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Ssl"
    },
    {
      "name": "kafka.ssl.truststore-location",
      "type": "org.springframework.core.io.Resource",
      "description": "Location of the trust store file.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Ssl"
    },
    {
      "name": "kafka.ssl.truststore-password",
      "type": "java.lang.String",
      "description": "Store password for the trust store file.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Ssl"
    },
    {
      "name": "kafka.template.default-topic",
      "type": "java.lang.String",
      "description": "Default topic to which messages will be sent.",
      "sourceType": "cn.sinaif.spring.boot.kafka.autoconfigure.KafkaProperties$Template"
    }
  ],
  "hints": []
}